# Name: Hayden Hoopes
# Date: 12/20/2021

# Import the required libraries
import unittest
import numpy as np
from time import time
import random

'''
    DO NOT EDIT THIS FILE
    Run this file from the command line to test your code.
    An "E" indicates and error and an "F" indicates failed test. A "*" indicates a passed test.
    A different copy of this file will be run against your code to test it.
'''

# Import the student's code
from numpy_arrays_assignment_1 import celsiusToFahrenheitWithArrays, \
    celsiusToFahrenheitWithLoops, randomIntegerMatrix, makeIdentityMatrix

# Create test case for homework question 1
class TestQuestion1(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print("******  QUESTION 1 TESTS  ******")

    @classmethod
    def tearDownClass(cls):
        print("\n")

    # Do both function return the correct data type? (list vs. numpy array)
    def test_returns_correct_type(self):
        temps = [-40, 0, 100]
        self.assertIsInstance(celsiusToFahrenheitWithArrays(temps), np.ndarray)
        self.assertIsInstance(celsiusToFahrenheitWithLoops(temps), list)
    
    # Do both functions return the correct values?
    def test_calculations(self):
        temps = [-40, 0, 100]
        self.assertEqual(celsiusToFahrenheitWithLoops(temps.copy()), [-40, 32, 212])
        self.assertIsNone(np.testing.assert_array_equal(celsiusToFahrenheitWithArrays(temps.copy()), [-40, 32, 212]))

    # Is NumPy faster than normal loops? It should be
    def test_speed(self):
        temps = [random.randint(-41, 101) for i in range(5000000)]
        
        startLoopTime = time()
        celsiusToFahrenheitWithLoops(temps)
        loopsTime = round(time() - startLoopTime, 1)

        startArraysTime = time()
        celsiusToFahrenheitWithArrays(temps)
        arraysTime = round(time() - startArraysTime, 1)

        self.assertGreater(loopsTime, arraysTime)
        
        print(f"Converting 5,000,000 temperatures with loops took {loopsTime} seconds.")
        print(f"Converting 5,000,000 temperatures with NumPy arrays took {arraysTime} seconds")
        print(f"Using NumPy arrays was {loopsTime // arraysTime} times faster than loops!!!")


class TestQuestion2(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print("******  QUESTION 2 TESTS  ******")
    
    @classmethod
    def tearDownClass(cls):
        print("\n")

    # Is the shape of the returned matrix correct?
    def test_shape(self):
        givenHeight = 5
        givenWidth = 9
        
        m = randomIntegerMatrix(givenWidth, givenHeight)
        
        returnedWidth = m.shape[1]
        returnedHeight = m.shape[0]

        self.assertEqual(givenHeight, returnedHeight, f"Observe the matrix: \n{m}\nThe height should be {givenHeight} but was {returnedHeight}")
        self.assertEqual(givenWidth, returnedWidth, f"Observe the matrix: \n{m}\nThe width should be {givenWidth} but was {returnedWidth}")

        givenHeight2 = 7
        givenWidth2 = 14
        n = randomIntegerMatrix(givenWidth2, givenHeight2)
        returnedHeight2 = n.shape[0]
        returnedWidth2 = n.shape[1]

        self.assertEqual(givenHeight2, returnedHeight2, f"Observe the matrix: \n{n}\nThe height should be {givenHeight2} but was {returnedHeight2}")
        self.assertEqual(givenWidth2, returnedWidth2, f"Observe the matrix: \n{n}\nThe height should be {givenWidth2} but was {returnedWidth2}")

    # Is the thing returned a numpy array?    
    def test_type(self):
        self.assertIsInstance(randomIntegerMatrix(2, 3), np.ndarray)


class TestQuestion3(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print("******  QUESTION 3 TESTS  ******")

    @classmethod
    def tearDownClass(cls):
        print("\n")

    def setUp(self):
        self.sizes = [i for i in range(30)]

    
    # Is the thing returned a numpy array?
    def test_type(self):
        self.assertIsInstance(makeIdentityMatrix(4), np.ndarray)
    
    def test_shape(self):
        for i in self.sizes:
            self.assertEqual(makeIdentityMatrix(i).shape[0], i)
            self.assertEqual(makeIdentityMatrix(i).shape[1], i)

    # Is the matrix returned actually an identity matrix?
    def test_identity(self):
        for i in self.sizes:
            m = makeIdentityMatrix(i)
            if m.shape[0] == 0 and m.shape[1] == 0:
                pass
            else:
                for row in range(m.shape[1]):
                    for col in range(m.shape[0]):
                        if row == col:
                            self.assertEqual(m[row, col], 1)
                        else:
                            self.assertEqual(m[row, col], 0)


    

if __name__ == '__main__':
    unittest.main()