# Name: Hayden Hoopes
# Date: 12/20/2021

# Import the required libraries
import unittest
import numpy as np
import random

'''
    DO NOT EDIT THIS FILE
    Run this file from the command line to test your code.
    An "E" indicates and error and an "F" indicates failed test. A "*" indicates a passed test.
    A different copy of this file will be run against your code to test it.
'''

# Import the student's code
from numpy_arrays_assignment_3 import *

class TestQuestion1(unittest.TestCase):
    np.random.seed(1)
    q1_data = np.random.randint(-100, 101, 100) # array for Question 1

    @classmethod
    def setUpClass(cls):
        print("Checking Question 1...")        

    def test_type(self):
        self.assertIsInstance(getNumbersBetween(self.q1_data, -50, 50), np.ndarray)

    def test_case_1(self):
        a = np.array([-28, -21, -29, 1, -4, -14, 15, -29, -24, -20, 9, 15, 11, 4, 0, -17, -13, -8, -26, 13, -23])        
        t = getNumbersBetween(self.q1_data, -30, 20)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_2(self):
        a = np.array([37, 33, 29, 34, 1, 39, 37, 28, 15, 21, 31, 9, 15, 11, 35, 4, 26, 25, 36, 13, 28])        
        t = getNumbersBetween(self.q1_data, 0, 40)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_3(self):
        a = np.array([])        
        t = getNumbersBetween(self.q1_data, -500, -200)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_4(self):
        a = np.array([])        
        t = getNumbersBetween(self.q1_data, 60, -20)
        self.assertIsNone(np.testing.assert_array_equal(a, t))


class TestQuestion2(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print("\nChecking Question 2...")

    def test_type(self):
        np.random.seed(2)
        q2_data = np.random.randint(-100, 101, 100) # array for Question 2
        self.assertIsInstance(negativeNumbersExceptNegative57(q2_data), np.ndarray)

    def test_case_1(self):
        np.random.seed(2)
        q2_data = np.random.randint(-100, 101, 100) # array for Question 2
        a = np.array([-85, -28, -78, -25, -93, -5, -25, -53, -37, -69, -63, -96, -49, -62, -67, -42, -33, -31, -12, -54, -5, -69, -20, -48, -50, -37, -51, -61, -85, -27, -17, -4, -68, -74, -24, -60, -66, -40, -30, -14, -81, -44, -32, -19, -39, -3, -13, -48, -84, -45, -30])
        t = negativeNumbersExceptNegative57(q2_data)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_2(self):
        np.random.seed(22)
        q2_data = np.random.randint(-100, 101, 100) # array for Question 2
        a = np.array([-56, -16, -86, -55, -7, -66, -92, -73, -16, -71, -19, -62, -81, -93, -77, -77, -48, -53, -17, -42, -40, -52, -7, -35, -7, -47, -16, -48, -4, -21, -11, -20, -12, -83, -38, -95, -95, -30, -43, -31, -100, -38, -4, -37])
        t = negativeNumbersExceptNegative57(q2_data)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_3(self):
        np.random.seed(222)
        q2_data = np.random.randint(-100, 101, 100) # array for Question 2
        a = np.array([-55, -86, -34, -14, -92, -12, -80, -23, -17, -65, -83, -43, -85, -39, -1, -45, -16, -31, -9, -85, -16, -76, -52, -96, -20, -51, -93, -2, -6, -32, -2, -12, -66, -49, -62, -49, -85, -54, -33, -94, -85, -3, -19, -18, -28, -94, -5, -17, -60, -20, -16])
        t = negativeNumbersExceptNegative57(q2_data)
        self.assertIsNone(np.testing.assert_array_equal(a, t))

    def test_case_4(self):
        q2_data = np.array([-57, -57, -57, -57, -57, -57, -56, -57, -57, -57, -57, -57, -57, -58, -57, 10000])
        a = np.array([-56, -58])
        t = negativeNumbersExceptNegative57(q2_data)
        self.assertIsNone(np.testing.assert_array_equal(a, t))


class TestQuestion3(unittest.TestCase):
    np.random.seed(3)
    q3_data = np.random.randint(-100, 101, 100) # array for Question 3

    @classmethod
    def setUpClass(cls):
        print("\nChecking Question 3...")

    def test_type(self):
        self.assertIsInstance(leftAndRight(self.q3_data, 3), np.ndarray)

    def test_case_1(self):
        a = np.array([10, -61, -31, -44])
        t = leftAndRight(self.q3_data, 4).tolist()
        self.assertIn(10, t)
        self.assertIn(-61, t)
        self.assertIn(-31, t)
        self.assertIn(-44, t)
        self.assertNotIn(0, t)
        self.assertNotIn(99, t)
        self.assertNotIn(-99, t)
        self.assertNotIn(-50, t)

    def test_case_2(self):
        a = np.array([52, 52, -61, 57])
        t = leftAndRight(self.q3_data, 6).tolist()
        self.assertIn(-61, t)
        self.assertIn(52, t)
        self.assertIn(57, t)
        self.assertNotIn(50, t)
        self.assertNotIn(0, t)
        self.assertNotIn(-10, t)
        self.assertNotIn(58, t)

    def test_case_3(self):
        a = np.array([-79, 92, 100, -46])
        t = leftAndRight(self.q3_data, -100).tolist()
        self.assertIn(-79, t)
        self.assertIn(-46, t)
        self.assertIn(92, t)
        self.assertIn(100, t)
        self.assertNotIn(50, t)
        self.assertNotIn(-50, t)
        self.assertNotIn(5, t)
        self.assertNotIn(13, t)
        

    def test_case_4(self):
        a = np.array([])
        t = leftAndRight(self.q3_data, -101)
        self.assertIsNone(np.testing.assert_array_equal(a, t))
    

if __name__ == '__main__':
    unittest.main()